üìë *Agenda for Week 4 Day 3: Advanced Playwright Interactions*

üéØ *[ Focus: Handling real-world user interactions like windows, files, and data-driven testing ]* 

üìÜ Date: 21 October [Tuesday]  

üïù Session Highlights

‚ø° Recap
* Quick review of key learnings from previous sessions.  

1. *Window Handling*  
* Understanding multiple browser contexts and tabs/windows.  
* Switching between windows and handling pop-ups.  
* Real-time examples: Flipkart product page.

2. *File Upload*  
* Uploading files using file input elements.  
* Working with drag-and-drop style uploads.  
* Example: Automating resume uploads in job portals.

3. *File Download*  
* Automating file download process in Playwright.  
* Setting download paths and verifying file content.   


Window Handling
-------------

Definition: Managing new tabs or browser windows opened by the application (via window.open or links with target="_blank).

Usage: Capture and control multiple pages in the same browser context.

Types:

Sequential Approach
------------------

Wait for the new page after the action that opens it.

await actionThatOpensNewPage();
const newPage = await context.waitForEvent('page');


**Simpler but may risk missing the event if the page opens too quickly.

Concurrent Approach (Recommended)
-------------------

Wait for the new page and trigger the action at the same time.


const [newPage] = await Promise.all([
  context.waitForEvent('page'),
  actionThatOpensNewPage()
]);

**Ensures you never miss the page event.

Switch between pages using:
--------------------------

context.pages();       // Returns all open pages in the context
newPage.bringToFront(); // Focus a specific page


*****************************************************************************************


# File Upload
--------------

### **Definition**

Uploading files into a web application using Playwright.
Playwright simulates attaching files to `<input type="file">` elements or drag-and-drop areas.

---

### **When `type="file"` is Present**

Directly set the file(s) to the input element.

const fileInput = page.locator('input[type="file"]');
await fileInput.setInputFiles('tests/data/sample.pdf');

* **Multiple Files:**

await fileInput.setInputFiles(['file1.png', 'file2.png']);

---

### **When `type="file"` is Not Present (Custom Upload UI)**

Some apps hide the `<input>` or use a styled button (drag-drop zones).
Steps:

1. Inspect and find the hidden file input.
2. Use `setInputFiles` on that hidden element.


const hiddenInput = page.locator('#hidden-file-input');
await hiddenInput.setInputFiles('tests/data/sample.pdf');


If the input is not accessible at all ‚Üí Workaround is to use OS-level automation (not Playwright‚Äôs scope).

---

# File Download
----------------

### **Definition**

Handling files downloaded by the application (clicking "Download" links/buttons).

---

### **Usage**

Playwright provides a `page.waitForEvent('download')` listener.


const [download] = await Promise.all([
  page.waitForEvent('download'),      // Wait for download event
  page.click('text=Download Report')  // Trigger download
]);

// Save to desired path
await download.saveAs('downloads/report.pdf');

// Get file path in temp location
console.log(await download.path());


**Notes:**

* Default: Playwright saves downloads in a temporary directory.
* Always use `Promise.all` to avoid missing the download event.