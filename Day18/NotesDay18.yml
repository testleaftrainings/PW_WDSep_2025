📑 Agenda for Week 5 Day 2: Advanced Data Parameterization and Test Annotation(Hooks)

🎯 [Focus: Advanced Data Parameterization and Test Annotation(Hooks]  

📆 Date: 27 September [Saturday]  

🕝 Session Highlights

⿡ Recap
* Quick review of key learnings from previous sessions. 

1. *Reading CSV and JSON Files*  
* Importing and parsing CSV/JSON test data.   
* Best practices for maintaining test data files.

2. *Reading ENV Files*  
* Importing and parsing ENV test data.   
* Best practices for maintaining test data files. 


🕡 Wrap Up / Q&A  

📝 Keep your physical notebook and pen handy to sketch out ideas!




# Data Parameterization with CSV
---
### **Definition**
CSV --> Comma Seperated Values.

Reading test data from CSV files and running tests with multiple data sets.
CSV is widely used in organizations for bulk test data (rows = test cases, columns = input fields).

Usage
1. Sample CSV (testData.csv):

tcid,username,password
1,demoSalesManager,crmsfa
2,demoCSR,crmsfa

Step 1:
Install csv : command - npm install csv-parse.

Step 2:
Create a .csv file under Data folder.

Step 3:
Create a .spec.ts and import data from csv file similar to the sample script.

Step 3:
Use the imported data in your test cases for validation.  

Step 4:
Run the test to see data-driven testing in action.



# Data Parameterization with ENV
---
### **Definition**

A .env file (short for environment file) is a simple text file used to store environment variables in the form of key-value pairs.

It is commonly used in projects to separate configuration data (like URLs, API keys, database credentials, secrets) from the actual application code.

Usage
1. Sample ENV (config.env): 
APP_URL=https://example.com
USERNAME=demoUser
PASSWORD=securePass123


Step 1:
Install dotenv : command - npm install dotenv.
Step 2:
Create a .env file under Data folder.
Step 3:
Create a .spec.ts and import data from env file similar to the sample script. 
Step 4:
Use the imported data in your test cases for validation.
Step 5:
Run the test to see data-driven testing in action.

-----------------------------------------------------------------------